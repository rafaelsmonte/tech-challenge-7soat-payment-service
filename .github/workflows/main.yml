name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  sonar:
    name: Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      
      # Executa o scanner do SonarQube
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      # Baixa o relatório e valida a cobertura
      - name: Valida cobertura do Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Obtém o ID do projeto
          PROJECT_KEY="<SEU_PROJECT_KEY>"
          COVERAGE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}&metricKeys=coverage" | jq -r '.component.measures[0].value')
          
          echo "Cobertura atual: ${COVERAGE}%"
          
          if (( $(echo "${COVERAGE} < 80" | bc -l) )); then
            echo "Cobertura insuficiente! A cobertura atual é ${COVERAGE}%."
            exit 1
          fi

      - name: Success Message
        run: echo "Cobertura aprovada! ${COVERAGE}%"
  build-and-push:
    needs: sonar
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_ECR_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY:  tech-challenge-7soat/payments-service
        LATEST_TAG: latest
      run: |
        export BUILD_VERSION_TAG=$(date +%Y-%m-%d-%I_%M_%S_utc)
        docker build -f docker/Dockerfile -t "service-$BUILD_VERSION_TAG" .
        docker tag "service-$BUILD_VERSION_TAG:latest" "$ECR_REGISTRY/$ECR_REPOSITORY:service-$BUILD_VERSION_TAG" && docker push "$ECR_REGISTRY/$ECR_REPOSITORY:service-$BUILD_VERSION_TAG"
        docker tag "service-$BUILD_VERSION_TAG:latest" "$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG" && docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG"
    
    
#   deploy: 
#     needs: build-and-push
#     name: Deploy to EKS Image
#     runs-on: ubuntu-latest
#     environment: production
#     steps: 
#     - name: Check out code
#       uses: actions/checkout@v2
      
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_ECR_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
#       with:
#         mask-password: true

#     - name: Install eksctl
#       run: |
#           ARCH=amd64
#           PLATFORM=$(uname -s)_$ARCH 
#           curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
#           tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
#           sudo mv /tmp/eksctl /usr/local/bin

#     - name: Update EKS deployment with new image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: tech-challenge-7soat-ecr-api
#         DEPLOYMENT_NAME: tech-challenge-7soat-api-deployment
#         CLUSTER_NAME: tech-challenge-7soat
#         IMAGE_TAG: latest
#       run: |
#           eksctl utils write-kubeconfig --cluster=$CLUSTER_NAME --region=us-east-1
#           kubectl rollout restart deployment/$DEPLOYMENT_NAME 
